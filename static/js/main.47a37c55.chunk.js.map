{"version":3,"sources":["assets/images/happy_earth.png","assets/images/happy_earth_ellipses.png","assets/images/flags.png","components/CountryList/query.js","components/MyError/MyError.js","components/MyLoader/MyLoader.js","components/CoutryDetails/DataView/DataView.js","components/CountryList/CountryList.js","components/CoutryDetails/query.js","components/CoutryDetails/SeeMore/SeeMore.js","components/CoutryDetails/DataViewLanguages/DataViewLanguages.js","components/CoutryDetails/DataViewList/DataViewList.js","components/CoutryDetails/CountryDetails.js","components/TopBlock/TopBlock.js","components/CountryDetailsMobile/query.js","components/CountryDetailsMobile/CountryDetailsMobile.js","components/CountryListMobile/query.js","components/CountryListMobile/CountryListMobile.js","components/MyHeader/MyHeader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","COUTRIES","gql","MyError","message","className","MyLoader","loader","DataView","props","title","data","position","addictions","style","marginLeft","CountryList","list","setId","useQuery","loading","error","Country","map","index","name","capital","flag","svgFile","subregion","key","onClick","e","src","alt","region","COUNTRY","SeeMore","top","bottom","left","right","useState","setList","item","replace","DataViewLanguages","myData","restData","length","slice","DataViewList","direction","filter","symbol","height","CountryDetails","id","variables","earth","width","popul","unit","population","currencies","timezones","callingCodes","officialLanguages","Math","round","toLocaleString","backgroundImage","earthFull","TopBlock","CountryDetailsMobile","countryDetails","transform","display","CountryListMobile","setCountryDetails","MyHeader","ArrowBack","App","Boolean","window","location","hostname","match","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.47a37c55.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/happy_earth.daa64770.png\";","module.exports = __webpack_public_path__ + \"static/media/happy_earth_ellipses.c33a86a4.png\";","module.exports = __webpack_public_path__ + \"static/media/flags.3efb7b23.png\";","import {gql} from \"@apollo/client\";\r\n\r\nexport const COUTRIES = gql`\r\n    {\r\n        Country(orderBy: name_asc) {\r\n            name\r\n            capital\r\n            alpha2Code\r\n            subregion {\r\n                name\r\n                region {\r\n                    name\r\n                }\r\n            }\r\n            flag{\r\n                svgFile\r\n            }\r\n\r\n        }\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport './MyError.scss';\r\n\r\n\r\nconst MyError = ({message}) => {\r\n    return (\r\n        <div className=\"MyError\">\r\n            Sorry,  you got an error: {message || \"some error\"}\r\n        </div>\r\n    )\r\n}\r\nexport default MyError;\r\n","import React from \"react\";\r\nimport './MyLoader.scss';\r\n\r\n\r\nconst MyLoader = ({loader}) => {\r\n    return (\r\n        <div className=\"MyLoader\">\r\n          {loader || \"  Here will be my loader....\"}\r\n        </div>\r\n    )\r\n}\r\nexport default MyLoader;\r\n","import React from 'react';\r\nimport './DataView.scss';\r\n\r\n\r\nconst DataView = (props) =>{\r\n    let{title, data, position, addictions} = props;\r\n   data = data ===\"\" ? \"n/a\" : data ===\"Kiev\" ? \"Kyiv\" : data;\r\nreturn (\r\n    <div className={position ? `DataView + ${position} `: \"DataView\"}>\r\n        <div className=\"info__title\">{title}</div>\r\n        <div className=\"info__content\">{data}<span style={{marginLeft: \"10px\"}}>{addictions}</span></div>\r\n    </div>\r\n)\r\n}\r\n\r\nexport default DataView;","import React, {useState} from 'react';\r\nimport './CountryList.scss';\r\n\r\nimport { useQuery} from '@apollo/client';\r\nimport {COUTRIES} from \"./query\";\r\nimport MyError from \"../MyError/MyError\";\r\nimport MyLoader from \"../MyLoader/MyLoader\";\r\nimport DataView from \"../CoutryDetails/DataView/DataView\";\r\n\r\nfunction CountryList({setId}) {\r\n    const { loading, error, data } = useQuery(COUTRIES);\r\n\r\n    if (loading) return <div className=\"CountryList\"><MyLoader/></div>;\r\n    if (error) return <div className=\"CountryList\"> <MyError/></div>;\r\n\r\n    const renderList = (list) => (\r\n        <div className=\"CountryList \">\r\n            <div className=\"list\">\r\n                {list.map(({name, capital , flag : {svgFile : flag}, subregion }, index ) =>\r\n                    <div\r\n                       className=\"list__item\"\r\n                       key={name}\r\n                       onClick={(e) => { setId(name)}}\r\n                    >\r\n                        <div className=\"item__flag\">\r\n                             <img className=\"flag__image\"  src={flag} alt=\"flag\"/>\r\n                        </div>\r\n                        <div className=\"item__info\">\r\n                              <div className=\"info__country\">\r\n                                  <div className=\"info__title\">Country:</div>\r\n                                  <div className=\"info__data\">{name}</div>\r\n                              </div>\r\n                              {capital === \"Kiev\" ?\r\n                              <div className=\"info__capital\">\r\n                                  <div className=\"info__title\">Capital:</div>\r\n                                  <div className=\"info__data\">Kyiv</div>\r\n                              </div>:\r\n                              capital===\"\" ?\r\n                                  null :\r\n                                  <div className=\"info__capital\">\r\n                                      <div className=\"info__title\">Capital:</div>\r\n                                      <div className=\"info__data\">{capital}</div>\r\n                                  </div>\r\n                              }\r\n                              {subregion ?\r\n                                  <div className=\"info__region\">\r\n                                      <div className=\"info__title\">Region:</div>\r\n                                      <div className=\"info__data\">{subregion.region.name}</div>\r\n                                  </div> :\r\n                                  null\r\n                              }\r\n                      </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n    return renderList(data.Country);\r\n}\r\n\r\nexport default CountryList;","import {gql} from \"@apollo/client\";\r\n\r\nexport const COUNTRY = gql`\r\n    query GetCountry($name: String)  {\r\n        Country(name: $name) {\r\n            name\r\n            population\r\n            capital\r\n            officialLanguages {\r\n                name\r\n            }\r\n            subregion {\r\n                name\r\n                region {\r\n                    name\r\n                }\r\n            }\r\n            currencies {\r\n                name\r\n                symbol\r\n            }\r\n            flag {\r\n                svgFile\r\n            }\r\n            callingCodes {\r\n                name\r\n            }\r\n            timezones {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React, { useState} from 'react';\r\nimport './SeeMore.scss';\r\n\r\n\r\n\r\nconst SeeMore = ({data,top, bottom,left,right})=>{\r\n    const [list, setList] = useState(false);\r\nreturn (\r\n    <div\r\n        className=\"SeeMore\"\r\n        style={{bottom,top,right,left}}\r\n    >\r\n        {!list ? <button className=\"openButton\" onClick={()=>setList(true)}>See more</button>:\r\n            data.map(item=>\r\n                <div\r\n                    className=\"item__see\"\r\n                    key={item.name}\r\n                >{item.name.replace(\"UTC\",\"GMT\")}</div>\r\n            )\r\n        }\r\n        {list && <button className=\"closeButton\" onClick={()=>setList(false)}>Close</button>}\r\n    </div>\r\n)\r\n}\r\n\r\nexport default SeeMore;","import React from 'react';\r\nimport './DataViewLanguages.scss';\r\n\r\nimport SeeMore from \"../SeeMore/SeeMore\";\r\n\r\n\r\nconst DataViewLanguages = (props) =>{\r\n\r\n    let{title, data, position} = props;\r\n    let myData, restData;\r\n\r\n   if(data.length <= 3) {\r\n       myData = [...data];\r\n   }else {\r\n       myData = data.slice(0,3);\r\n       restData = data.slice(3);\r\n\r\n   }\r\n    return (\r\n        <div className={position ? `DataViewLanguages + ${position} `: \"DataViewLanguages\"}>\r\n            <div className=\"info__title\">{title}</div>\r\n            <div className=\"info__content\">{\r\n                myData.length ?\r\n                    myData.map(item=>\r\n                        <div\r\n                            className=\"item\"\r\n                            key={item.name}\r\n                        >{item.name}</div>) :\r\n                    <div>n/a</div>\r\n                }\r\n            {restData ?<div className=\"wrapper\">\r\n                <SeeMore\r\n                    data={restData}\r\n                    bottom=\"20%\"\r\n                    top=\"\"\r\n                    left=\"\"\r\n                    right=\"\"\r\n                /></div>: null}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DataViewLanguages;","import React from 'react';\r\nimport './DataViewList.scss';\r\n\r\nimport SeeMore from \"../SeeMore/SeeMore\";\r\n\r\n\r\nconst DataViewList = (props) =>{\r\n\r\n    let{title, data, position, addictions, direction} = props;\r\n    let myData, restData;\r\n\r\n    if(!data)    return  <div className={position ? `DataViewList + ${position} `: \"DataViewList\"}>\r\n        <div className=\"absent\">Data is absent today</div>\r\n    </div>;\r\n\r\n        if(data.length <= 3 && data.length > 0 ) {\r\n            myData = [...data];\r\n        }else if(data.length > 3) {\r\n            myData = data.slice(0,3);\r\n            restData = data.slice(3);\r\n        }\r\n\r\n    return (\r\n        <div className={position ? `DataViewList + ${position} `: \"DataViewList\"}>\r\n            <div className=\"info__title\">{title}</div>\r\n            <div className=\"info__content\">{\r\n                data.length ?\r\n                    myData.filter(item=>item.name!==\"null\")\r\n                        .map(item=>\r\n                        <div\r\n                            className=\"item\"\r\n                            key={item.name}\r\n                        >{addictions}\r\n                                <span className=\"item__symbol\">{\r\n                            !item.symbol ? null : item.symbol ===\"null\" ? \"n/a\": `\"${item.symbol}\"`\r\n                                }</span>\r\n                            {item.name.replace(\"UTC\",\"GMT\")}\r\n\r\n                        </div>)\r\n                :\r\n                    <div className=\"item\">n/a</div>\r\n                    }\r\n                {restData ?\r\n                    <SeeMore\r\n                        data={restData}\r\n                        bottom=\"\"\r\n                        top=\"100%\"\r\n                        left=\"\"\r\n                        right=\"\"\r\n                    />: null}\r\n\r\n            </div>\r\n            {data.length > 3 ?<div style={{height:\"20px\"}}></div>:null}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DataViewList;","import React from 'react';\r\nimport './CountryDetails.scss';\r\nimport DataView from \"./DataView/DataView\";\r\n\r\nimport {  useQuery} from '@apollo/client';\r\n\r\nimport flags from '../../assets/images/flags.png';\r\nimport earth from '../../assets/images/happy_earth.png';\r\nimport earthFull from '../../assets/images/happy_earth_ellipses.png'\r\n\r\nimport {COUNTRY} from './query';\r\nimport DataViewLanguages from \"./DataViewLanguages/DataViewLanguages\";\r\nimport DataViewList from \"./DataViewList/DataViewList\";\r\n\r\n\r\n\r\nconst CountryDetails = ({id}) => {\r\n    const { loading, error, data } = useQuery(COUNTRY,{\r\n        variables: {name: id}\r\n    });\r\n\r\n    if(!id)  return (\r\n        <div className=\"CountryDetails \" >\r\n          <div className=\"choose__country\">\r\n            <div className=\"choose__image\">\r\n                <img src={earth} width={266} height={266} alt=\"happy earth\"/>\r\n            </div>\r\n              <div className=\"choose__title\">Choose a card :)</div>\r\n          </div>\r\n\r\n        </div>\r\n    )\r\n\r\n\r\n    if (loading) return <div className=\"CountryDetails \"><p className=\"loading\">Loading...</p></div>;\r\n    if (error) return <div className=\"CountryDetails \"><p className=\"error\">Error :(</p></div>;\r\n\r\n\r\nconst{\r\n    name,\r\n    population,\r\n    capital,\r\n    flag:{svgFile :flag},\r\n    subregion,\r\n    currencies,\r\n    timezones,\r\n    callingCodes,\r\n    officialLanguages\r\n} = data.Country[0];\r\n\r\nconst region = subregion ? subregion.region.name : \"n/a\";\r\nconst currency = currencies.length ? currencies : \"n/a\";\r\nconst callCode = callingCodes.length ? callingCodes : \"n/a\";\r\nconst officialLanguage = officialLanguages.length ? officialLanguages : \"n/a\";\r\nlet  popul, unit;\r\n\r\nif (population > 1000000) {\r\n    popul = (Math.round(population/10000)/100).toLocaleString(\"pl\");\r\n    unit = \"m\";\r\n} else {\r\n    popul = (Math.round(population/10)/100).toLocaleString(\"pl\");\r\n    unit = \"t\"\r\n}\r\n\r\n    return (\r\n        <div className=\"CountryDetails \">\r\n            <div className=\"country\">\r\n                <div className=\"country__top\">\r\n                    <div className=\"top__flag\" style={{backgroundImage : `url(${flag})`}}></div>\r\n                </div>\r\n                <div className=\"country__block\">\r\n                    <img  className=\"block__image\" src={earthFull} />\r\n                    <div className=\"block__info\">\r\n                        <div className=\"info one\">\r\n                            <DataView\r\n                                title=\"Country\"\r\n                                data={name}\r\n                                position=\"\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"info two\">\r\n                            <DataView\r\n                                title=\"Capital\"\r\n                                data={capital}\r\n                                position=\"left\"\r\n                            />\r\n                            <DataView\r\n                                title=\"Region\"\r\n                                data={region}\r\n                                position=\"right\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"info three\">\r\n                            <DataView\r\n                                title=\"Population\"\r\n                                data={popul}\r\n                                position=\"\"\r\n                                addictions={unit}\r\n                            />\r\n                            <DataViewList\r\n                                        title=\"Time zone\"\r\n                                        data={timezones}\r\n                                        position=\"\"\r\n                                        addictions=\"\"\r\n                                    />\r\n                            </div>\r\n                        <div className=\"info four\">\r\n                            <DataViewList\r\n                                title=\"Currencies\"\r\n                                data={currencies}\r\n                                position=\"left\"\r\n                                addictions=\"\"\r\n                            />\r\n                            <DataViewList\r\n                                title=\"Calling codes\"\r\n                                data={callingCodes}\r\n                                position=\"\"\r\n                                addictions=\"+\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"info five\">\r\n                            <DataViewLanguages\r\n                                title=\"Official languages\"\r\n                                data={officialLanguages}\r\n                                direction=\"row\"\r\n                                position=\"\"\r\n                                addictions=\"\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default CountryDetails;","import React from 'react';\r\nimport './TopBlock.scss';\r\nimport earth from \"../../assets/images/happy_earth.png\";\r\n\r\n\r\nconst TopBlock = ({id}) => {\r\n  if(!id)  return (\r\n            <div className=\"TopBlock \" >\r\n                <div className=\"choose__country\">\r\n                    <div className=\"choose__image\">\r\n                        <img className=\"choose__earth\" src={earth}  alt=\"happy earth\"/>\r\n                    </div>\r\n                    <div className=\"choose__title\">Choose a card :)</div>\r\n                </div>\r\n            </div>\r\n            )\r\n        return (\r\n            <div className=\"TopBlock \" >\r\n                <div className=\"country\">\r\n                    <div className=\"country__flags\"></div>\r\n                    <div className=\"choose__image\">\r\n                        <img className=\"choose__earth \" src={earth}  alt=\"happy earth\"/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default TopBlock;","import {gql} from \"@apollo/client\";\r\n\r\nexport const COUNTRY = gql`\r\n    query GetCountry($name: String)  {\r\n        Country(name: $name) {\r\n            name\r\n            population\r\n            capital\r\n            officialLanguages {\r\n                name\r\n            }\r\n            subregion {\r\n                name\r\n                region {\r\n                    name\r\n                }\r\n            }\r\n            currencies {\r\n                name\r\n                symbol\r\n            }\r\n            flag {\r\n                svgFile\r\n            }\r\n            callingCodes {\r\n                name\r\n            }\r\n            timezones {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport './CountryDetailsMobile.scss'\r\n\r\nimport {  useQuery} from '@apollo/client';\r\n\r\n\r\nimport {COUNTRY} from './query';\r\nimport DataView from \"../CoutryDetails/DataView/DataView\";\r\nimport DataViewList from \"../CoutryDetails/DataViewList/DataViewList\";\r\nimport DataViewLanguages from \"../CoutryDetails/DataViewLanguages/DataViewLanguages\";\r\n\r\n\r\n\r\n\r\nconst CountryDetailsMobile = ({id, countryDetails}) => {\r\n    const { loading, error, data } = useQuery(COUNTRY,{\r\n        variables: {name: id}\r\n    });\r\n    if(!id) return null;\r\n    if (loading) return <div\r\n        className=\"CountryDetailsMobile \"\r\n        style={countryDetails? { transform: \"translateX(0)\", height: \"100%\" } : null}\r\n    ><p className=\"loading\">Loading...</p></div>;\r\n    if (error) return <div\r\n        className=\"CountryDetailsMobile \"\r\n        style={countryDetails? { transform: \"translateX(0)\", height: \"100%\" } : null}\r\n    ><p className=\"error\">Error :(</p></div>;\r\n\r\n\r\n    const{\r\n        name,\r\n        population,\r\n        capital,\r\n        flag:{svgFile :flag},\r\n        subregion,\r\n        currencies,\r\n        timezones,\r\n        callingCodes,\r\n        officialLanguages\r\n    } = data.Country[0];\r\n\r\n    const region = subregion ? subregion.region.name : \"n/a\";\r\n    const currency = currencies.length ? currencies : \"n/a\";\r\n    const callCode = callingCodes.length ? callingCodes : \"n/a\";\r\n    const officialLanguage = officialLanguages.length ? officialLanguages : \"n/a\";\r\n    let  popul, unit;\r\n\r\n    if (population > 1000000) {\r\n        popul = (Math.round(population/10000)/100).toLocaleString(\"pl\");\r\n        unit = \"m\";\r\n    } else {\r\n        popul = (Math.round(population/10)/100).toLocaleString(\"pl\");\r\n        unit = \"t\"\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"CountryDetailsMobile \"\r\n            style={!countryDetails? { transform: \"translateX(100%)\", display: \"none\"} : null}\r\n        >\r\n            <div className=\"country\">\r\n                <div className=\"country__block\">\r\n                    <div className=\"item__flag\">\r\n                        <img className=\"flag__image\"  src={flag} alt=\"flag\"/>\r\n                    </div>\r\n                    <DataView\r\n                        title=\"Country\"\r\n                        data={name}\r\n                        position=\"\"\r\n                    />\r\n                    <DataView\r\n                        title=\"Capital\"\r\n                        data={capital}\r\n                        position=\"left\"\r\n                    />\r\n                    <DataView\r\n                        title=\"Region\"\r\n                        data={region}\r\n                        position=\"right\"\r\n                    />\r\n                    <DataView\r\n                        title=\"Population\"\r\n                        data={popul}\r\n                        position=\"\"\r\n                        addictions={unit}\r\n                    />\r\n                    <DataViewList\r\n                        title=\"Time zone\"\r\n                        data={timezones}\r\n                        position=\"\"\r\n                        addictions=\"\"\r\n                    />\r\n                    <DataViewList\r\n                        title=\"Currencies\"\r\n                        data={currencies}\r\n                        position=\"left\"\r\n                        addictions=\"\"\r\n                    />\r\n                    <DataViewList\r\n                        title=\"Calling codes\"\r\n                        data={callingCodes}\r\n                        position=\"\"\r\n                        addictions=\"+\"\r\n                    />\r\n                    <DataViewLanguages\r\n                        title=\"Official languages\"\r\n                        data={officialLanguages}\r\n                        direction=\"row\"\r\n                        position=\"\"\r\n                        addictions=\"\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default CountryDetailsMobile;","import {gql} from \"@apollo/client\";\r\n\r\nexport const COUTRIES = gql`\r\n    {\r\n        Country(orderBy: name_asc) {\r\n            name\r\n            capital\r\n            alpha2Code\r\n            subregion {\r\n                name\r\n                region {\r\n                    name\r\n                }\r\n            }\r\n            flag{\r\n                svgFile\r\n            }\r\n\r\n        }\r\n    }\r\n`;\r\n","import React, {useState} from 'react';\r\nimport './CountryListMobile.scss';\r\n\r\nimport { useQuery} from '@apollo/client';\r\nimport {COUTRIES} from \"./query\";\r\nimport MyLoader from \"../MyLoader/MyLoader\";\r\nimport MyError from \"../MyError/MyError\";\r\n\r\n\r\nfunction CountryListMobile({setId,countryDetails,setCountryDetails}) {\r\n    const { loading, error, data } = useQuery(COUTRIES);\r\n\r\n    if (loading) return <div className=\"CountryListMobile\"><MyLoader/></div>;\r\n    if (error) return <div className=\"CountryListMobile\"><MyError/></div>;\r\n\r\n    const renderList = (list) => (\r\n        <div\r\n            className=\"CountryListMobile \"\r\n            style={countryDetails ? { display: \"none\" } : null}\r\n            onClick={()=>{setCountryDetails(true)}}\r\n        >\r\n            <div className=\"list\">\r\n                {list.map(({name, capital , flag : {svgFile : flag}, subregion }, index ) =>\r\n                    <div\r\n                        className=\"list__item\"\r\n                        key={name}\r\n                        onClick={(e) => { setId(name)}}\r\n                    >\r\n                        <div className=\"item__flag\">\r\n                            <img className=\"flag__image\"  src={flag} alt=\"flag\"/>\r\n                        </div>\r\n                        <div className=\"item__info\">\r\n                            <div className=\"info__country\">\r\n                                <div className=\"info__title\">Country:</div>\r\n                                <div className=\"info__data\">{name}</div>\r\n                            </div>\r\n                            {capital === \"Kiev\" ?\r\n                                <div className=\"info__capital\">\r\n                                    <div className=\"info__title\">Capital:</div>\r\n                                    <div className=\"info__data\">Kyiv</div>\r\n                                </div>:\r\n                                capital===\"\" ?\r\n                                    null :\r\n                                    <div className=\"info__capital\">\r\n                                        <div className=\"info__title\">Capital:</div>\r\n                                        <div className=\"info__data\">{capital}</div>\r\n                                    </div>\r\n                            }\r\n                            {subregion ?\r\n                                <div className=\"info__region\">\r\n                                    <div className=\"info__title\">Region:</div>\r\n                                    <div className=\"info__data\">{subregion.region.name}</div>\r\n                                </div> :\r\n                                null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n    return renderList(data.Country);\r\n}\r\n\r\nexport default CountryListMobile;","import React from \"react\";\r\nimport './MyHeader.scss';\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport {ArrowBack} from \"@material-ui/icons\";\r\n\r\nconst MyHeader = ({countryDetails, setCountryDetails}) => {\r\n    return (\r\n        <div className=\"MyHeader container-fluid\" >Country list\r\n            {countryDetails ?\r\n                <button\r\n                    className=\"back__arrow\"\r\n                    onClick={()=>{setCountryDetails(false)}}\r\n                ><ArrowBack/></button>:\r\n            null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyHeader;","import React, {useState} from 'react';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport './App.scss';\r\nimport CountryList from \"./components/CountryList/CountryList\";\r\nimport CountryDetails from \"./components/CoutryDetails/CountryDetails\";\r\nimport TopBlock from \"./components/TopBlock/TopBlock\";\r\nimport CountryDetailsMobile from \"./components/CountryDetailsMobile/CountryDetailsMobile\";\r\nimport CountryListMobile from \"./components/CountryListMobile/CountryListMobile\";\r\nimport MyHeader from \"./components/MyHeader/MyHeader\";\r\n\r\n\r\n\r\nfunction App() {\r\n    const [id, setId] = useState(null);\r\n    const [countryDetails, setCountryDetails] = useState(false);\r\n\r\n    return (\r\n    <div className=\"App \">\r\n        <MyHeader\r\n            countryDetails={countryDetails}\r\n            setCountryDetails={setCountryDetails}\r\n        />\r\n        <CountryDetailsMobile\r\n            id={id}\r\n            countryDetails={countryDetails}\r\n        />\r\n         <div className=\"content container-fluid \">\r\n            <div className=\"row \">\r\n                <div className=\"col-12 col-lg-8 order-lg-2 \">\r\n                     <TopBlock\r\n                        id={id}\r\n                     />\r\n                     <CountryDetails\r\n                        id={id}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12  col-lg-4\">\r\n                    <CountryList\r\n                        setId={setId}\r\n                    />\r\n                    <CountryListMobile\r\n                        setId={setId}\r\n                        countryDetails={countryDetails}\r\n                        setCountryDetails={setCountryDetails}\r\n                    />\r\n                </div>\r\n            </div>\r\n         </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {ApolloClient, ApolloProvider, InMemoryCache} from \"@apollo/client\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst client = new ApolloClient({\r\n    uri: 'https://countries-274616.ew.r.appspot.com',\r\n    cache: new InMemoryCache()\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <ApolloProvider client={client}>\r\n          <App />\r\n      </ApolloProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}